import dotenv from "dotenv";
import { Bot } from "grammy";
import axios from "axios";
import * as cheerio from "cheerio";

dotenv.config();
const bot = new Bot(process.env.BOT_API_KEY);
const senderChatId = process.env.SENDER_CHAT_ID;
const destinationChatId = process.env.DESTINATION_CHAT_ID;
const processedMediaGroups = {};

const CLEANUP_INTERVAL = 60 * 60 * 1000; // 1 —á–∞—Å –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
setInterval(() => {
  console.log("–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏...");
  for (const mediaGroupId in processedMediaGroups) {
    delete processedMediaGroups[mediaGroupId];
  }
  console.log("–ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞.");
}, CLEANUP_INTERVAL);

bot.api.setMyCommands(
  [
    { command: "details", description: "–ó–∞–ø—Ä–æ—Å —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤" },
    { command: "message", description: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" },
  ],
  {
    scope: {
      type: "chat",
      chat_id: senderChatId,
    },
  }
);

// bot.command("start", (ctx) => console.log(ctx.chat.id)); // –í—ã–≤–æ–¥–∏—Ç chat_id –∫–∞–Ω–∞–ª–∞);

async function handleMessage(ctx) {
  const recievedChatId = ctx.chat.id;
  if (recievedChatId.toString() !== senderChatId) {
    return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö —á–∞—Ç–æ–≤
  }

  const userMessageId = ctx.message.message_id;
  const reply = {
    reply_to_message_id: userMessageId, // –£–∫–∞–∑—ã–≤–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å
  };

  if (ctx.message.new_chat_members) {
    return;
  }

  if (ctx.message.left_chat_member || ctx.message.left_chat_participant) {
    return; // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–µ —Ä–µ–∞–≥–∏—Ä—É—è –Ω–∞ —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  }

  const messageText = ctx.message.text?.trim() || ctx.message.caption?.trim();
  const parts = messageText.split(" ");

  let secondPart = "";
  if (parts[1]) {
    secondPart = parts[1].split("\n")[0];
  }

  if (!/^\d{14}$/.test(parts[0]) || isNaN(secondPart)) {
    // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞—ã
    await ctx.reply(
      '‚ùóÔ∏è–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –û—Ç—Å—É—Ç–≤—É–µ—Ç –æ—Ä–¥–µ—Ä –∏–ª–∏ –ª–æ–≥–∏–Ω"',
      reply
    );
    return;
  }

  const file = ctx.message.document || ctx.message.photo;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ —Ñ–∞–π–ª–∞/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

  if (!file) {
    await ctx.reply(
      "‚ùóÔ∏è–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.",
      reply
    );
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–∞ —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–º

  const order = parts[0];
  const login = parts[1];
  const messageAfter = parts.slice(2).join(" ");

  // –ø–æ–ª—É—á–µ–Ω–∏–µ externalID
  const externalID = await getExternalID(order, ctx);
  if (typeof externalID === "object") {
    ctx.reply(
      "‚ùóÔ∏è–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: –¥–∞–Ω–Ω—ã–π –∞–π–¥–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–µ–ª —Å–±–æ–π.",
      reply
    );
    return;
  }

  // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª –≤–º–µ—Å—Ç–µ —Å —Ñ–∞–π–ª–æ–º/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
  const messageToSend = `${externalID}\n${order} ${login && `${login}`}${
    messageAfter && `${messageAfter}`
  }`;

  if (ctx.message.document) {
    await bot.api.sendDocument(
      destinationChatId,
      ctx.message.document.file_id,
      {
        caption: messageToSend,
      }
    );
  } else if (ctx.message.photo) {
    await bot.api.sendPhoto(destinationChatId, ctx.message.photo[0].file_id, {
      caption: messageToSend,
    });
  }
  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
  const messageSendNotification = `üü¢–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\nBova ID: \`${externalID}\`.`;
  await bot.api.sendMessage(senderChatId, messageSendNotification, {
    parse_mode: "Markdown",
    reply_to_message_id: userMessageId,
  });
}

async function getExternalID(orderId, ctx) {
  try {
    const response = await axios.get(
      "https://api-crm.bovapay.com/tables/get_id/590",
      {
        params: {
          direction: "m2b",
          id: orderId, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ID –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
        },
      }
    );

    // –ü–∞—Ä—Å–∏–Ω–≥ HTML
    const responseHtml = cheerio.load(response.data);

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è h2 –≤–Ω—É—Ç—Ä–∏ div —Å –∫–ª–∞—Å—Å–æ–º "result"
    const externalId = responseHtml(".result h2").text();
    return externalId;
  } catch (error) {
    return error;
  }
}
bot.command("message", async (ctx) => {
  const recievedChatId = ctx.chat.id;
  if (recievedChatId.toString() !== senderChatId) {
    return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö —á–∞—Ç–æ–≤
  }

  const userMessageId = ctx.message.message_id;
  const reply = {
    reply_to_message_id: userMessageId, // –£–∫–∞–∑—ã–≤–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å
  };

  const messageText = ctx.message.text;
  const parts = messageText.split(" ");
  if (parts.length < 2) {
    // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
    await ctx.reply(
      '‚ùóÔ∏è–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –§–æ—Ä–º–∞—Ç: "/details <–æ—Ä–¥–µ—Ä>".',
      reply
    );
    return;
  }

  try {
    const textAfterCommand = parts.slice(1).join(" ");
    console.log(textAfterCommand);
    const senderMessage = `‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.`;
    await bot.api.sendMessage(destinationChatId, textAfterCommand);
    await bot.api.sendMessage(senderChatId, senderMessage);
  } catch (error) {
    await bot.api.sendMessage(
      senderChatId,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
    );
  }
});

bot.command("details", async (ctx) => {
  const recievedChatId = ctx.chat.id;
  if (recievedChatId.toString() !== senderChatId) {
    return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö —á–∞—Ç–æ–≤
  }

  const userMessageId = ctx.message.message_id;
  const reply = {
    reply_to_message_id: userMessageId, // –£–∫–∞–∑—ã–≤–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å
  };

  const messageText = ctx.message.text;
  const parts = messageText.split(" ");
  if (parts.length !== 2 || !/^\d{14}$/.test(parts[1])) {
    // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
    await ctx.reply(
      '‚ùóÔ∏è–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –§–æ—Ä–º–∞—Ç: "/details <–æ—Ä–¥–µ—Ä>".',
      reply
    );
    return;
  }

  const orderID = parts[1];

  try {
    const response = await axios.get(
      "https://api-crm.bovapay.com/tables/get_id/590",
      {
        params: {
          direction: "m2b",
          id: orderID, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ID –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
        },
      }
    );

    // –ü–∞—Ä—Å–∏–Ω–≥ HTML
    const responseHtml = cheerio.load(response.data, { decodeEntities: false });

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è h2 –≤–Ω—É—Ç—Ä–∏ div —Å –∫–ª–∞—Å—Å–æ–º "result"

    const externalId = responseHtml(".result h2").text();
    const requsit = responseHtml(".result tr:nth-child(2) td.pl").text();
    const bank = responseHtml(".result tr:nth-child(3) td.pl").text();
    const sum = responseHtml(".result tr:nth-child(4) td.pl").text();
    ctx.reply(
      `–†–µ–∫–≤–∏–∑–∏—Ç—ãüëÄ\n–û—Ä–¥–µ—Ä: \`${orderID}\`\nBova ID: \`${externalId}\`\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: \`${requsit}\`\n–ë–∞–Ω–∫: \`${bank}\`\n–°—É–º–º–∞: \`${sum}\`
      `,

      {
        parse_mode: "Markdown",
        ...reply,
      }
    );
  } catch (error) {
    ctx.reply(
      "‚ùóÔ∏è–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: –¥–∞–Ω–Ω—ã–π –∞–π–¥–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–µ–ª —Å–±–æ–π.",
      reply
    );
    return;
  }
});

bot.on("message", handleMessage);

bot.on([":photo", ":document"], async (ctx) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
  try {
    const userMessageId = ctx.message.message_id;
    const reply = {
      reply_to_message_id: userMessageId, // –£–∫–∞–∑—ã–≤–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å
    };
    const fileType = ctx.message.document || ctx.message.photo;

    if (ctx.message.media_group_id) {
      const mediaGroupId = ctx.message.media_group_id;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —ç—Ç–æ—Ç media_group_idq
      if (!processedMediaGroups[mediaGroupId]) {
        // –û—Ç–º–µ—Ç—å—Ç–µ, —á—Ç–æ —ç—Ç–æ—Ç media_group_id –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        processedMediaGroups[mediaGroupId] = true;

        // –í–∞—à –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–≤–æ–≥–æ PDF –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–µ
        if (ctx.message.document)
          await ctx.reply(
            "‚ùóÔ∏è–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ 2 PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞. –°–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª—ã –∫–æ–º–∞–Ω–¥–æ–π /toImage –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.",
            reply
          );
        if (ctx.message.photo)
          await ctx.reply("‚ùóÔ∏è–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –∑–∞–ø—Ä–æ—Å.", reply);
        return;
      } else {
        delete processedMediaGroups[mediaGroupId];
        console.log(processedMediaGroups);
        return;
      }
    }

    await ctx.reply("‚ùóÔ∏è–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ/PDF –∫ –∑–∞–ø—Ä–æ—Å—É.", reply);
  } catch (error) {
    return;
  }
});

bot.command("kill", async (ctx) => {
  const userId = ctx.from.id;

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const chatMember = await ctx.getChatMember(userId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º
    if (
      chatMember.status === "administrator" ||
      chatMember.status === "creator"
    ) {
      // –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, —Ç–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
      await ctx.reply("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
      console.log("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º");
      process.exit(0); // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    } else {
      // –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±—Ü–∫–µ!
      await ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–∏—Ö –ø—Ä–∞–≤.");
  }
});
bot.command("get_value", async (ctx) => {
  const userInput = ctx.message?.text?.split(" ")[1];

  if (!userInput) {
    await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –≤ —Ñ–æ—Ä–º–∞—Ç–µ /get_value <ID>");
    return;
  }

  try {
    const response = await axios.get(
      "https://api-crm.bovapay.com/tables/get_id/590",
      {
        params: {
          direction: "m2b",
          id: userInput, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ID –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
        },
      }
    );

    // –ü–∞—Ä—Å–∏–Ω–≥ HTML
    const responseHtml = cheerio.load(response.data);

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è h2 –≤–Ω—É—Ç—Ä–∏ div —Å –∫–ª–∞—Å—Å–æ–º "result"
    const externalId = responseHtml(".result h2").text();
    const senderMessage = `‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n\nBova ID: \`${externalId}\``;
    await bot.api.sendMessage(destinationChatId, `External ID: ${externalId}`);
    await bot.api.sendMessage(senderChatId, senderMessage, {
      parse_mode: "Markdown",
    });

    console.log("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª!");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.");
  }
});

bot.start({ drop_pending_updates: true });
