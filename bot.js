import dotenv from "dotenv";
import { Bot } from "grammy";
import axios from "axios";
import {
  getExternalID,
  handlePdfPngError,
  mediaGroupCache,
  mediaGroupTimers,
} from "./requests.js";
import * as cheerio from "cheerio";

dotenv.config();
export const bot = new Bot(process.env.BOT_API_KEY);
const senderChatId = process.env.SENDER_CHAT_ID;
const destinationChatId = process.env.DESTINATION_CHAT_ID;

let externalID = "";

bot.api.setMyCommands(
  [
    { command: "details", description: "–ó–∞–ø—Ä–æ—Å —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤" },
    // { command: "message", description: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" },
  ],
  {
    scope: {
      type: "chat",
      chat_id: senderChatId,
    },
  }
);

bot.command("details", async (ctx) => {
  const recievedChatId = ctx.chat.id;
  if (recievedChatId.toString() !== senderChatId) {
    return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö —á–∞—Ç–æ–≤
  }

  const userMessageId = ctx.message.message_id;
  const reply = {
    reply_to_message_id: userMessageId, // –£–∫–∞–∑—ã–≤–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å
  };

  const messageText = ctx.message.text;
  const parts = messageText.split(" ");
  if (parts.length !== 2 || !/^\d{14}$/.test(parts[1])) {
    // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
    try {
      await ctx.reply(
        '‚ùóÔ∏è–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –§–æ—Ä–º–∞—Ç: "/details <–æ—Ä–¥–µ—Ä>".',
        reply
      );
      return;
    } catch (error) {
      console.log(error);
      return;
    }
  }

  const orderID = parts[1];

  try {
    const response = await axios.get(
      "https://api-crm.bovapay.com/tables/get_id/590",
      {
        params: {
          direction: "m2b",
          id: orderID, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ID –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
        },
      }
    );

    // –ü–∞—Ä—Å–∏–Ω–≥ HTML
    const responseHtml = cheerio.load(response.data, { decodeEntities: false });

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è h2 –≤–Ω—É—Ç—Ä–∏ div —Å –∫–ª–∞—Å—Å–æ–º "result"

    const externalId = responseHtml(".result h2").text();
    const requsit = responseHtml(".result tr:nth-child(2) td.pl").text();
    const bank = responseHtml(".result tr:nth-child(3) td.pl").text();
    const sum = responseHtml(".result tr:nth-child(4) td.pl").text();
    ctx.reply(
      `–†–µ–∫–≤–∏–∑–∏—Ç—ãüëÄ\n–û—Ä–¥–µ—Ä: \`${orderID}\`\nBova ID: \`${externalId}\`\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: \`${requsit}\`\n–ë–∞–Ω–∫: \`${bank}\`\n–°—É–º–º–∞: \`${sum}\`
      `,

      {
        parse_mode: "Markdown",
        ...reply,
      }
    );
  } catch (error) {
    ctx.reply(
      "‚ùóÔ∏è–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: –¥–∞–Ω–Ω—ã–π –∞–π–¥–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–µ–ª —Å–±–æ–π.",
      reply
    );
    return;
  }
});

bot.command("kill", async (ctx) => {
  const recievedChatId = ctx.chat.id;

  if (recievedChatId.toString() !== senderChatId) {
    return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö —á–∞—Ç–æ–≤
  }

  const userId = ctx.from.id;

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const chatMember = await ctx.getChatMember(userId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º
    if (
      chatMember.status === "administrator" ||
      chatMember.status === "creator"
    ) {
      // –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, —Ç–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
      await ctx.reply("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
      console.log("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º");
      process.exit(0); // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    } else {
      // –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±—Ü–∫–µ!
      await ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–∏—Ö –ø—Ä–∞–≤.");
  }
});

const APPROVED_MESSAGE = "‚úÖ –ü–µ—Ä–≤–∏—á–Ω—ã–π —Å–ø–æ—Ä –æ–¥–æ–±—Ä–µ–Ω. –ü–ª–∞—Ç—ë–∂ –∑–∞—á–∏—Å–ª–µ–Ω";
const DECLINED_MESSAGE_AGAIN = "‚ùå –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Å–ø–æ—Ä –æ—Ç–∫–ª–æ–Ω—ë–Ω.";
const DECLINED_MESSAGE_FIRST = "‚ùå –ü–µ—Ä–≤–∏—á–Ω—ã–π —Å–ø–æ—Ä –æ—Ç–∫–ª–æ–Ω—ë–Ω.";

bot.on("edit", async (ctx) => {
  console.log(ctx);
  console.log(ctx.update.edited_channel_post.caption);
  const editedMessage = ctx.editedChannelPost;
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ –Ω—É–∂–Ω–æ–º –∫–∞–Ω–∞–ª–µ
  if (
    editedMessage.chat.id == destinationChatId &&
    ctx.update.edited_channel_post.caption
  ) {
    const messageText =
      editedMessage.text || ctx.update.edited_channel_post.caption;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–Ω—É –∏–∑ –Ω—É–∂–Ω—ã—Ö —Ñ—Ä–∞–∑
    if (
      messageText.includes(APPROVED_MESSAGE) ||
      messageText.includes(DECLINED_MESSAGE_FIRST) ||
      messageText.includes(DECLINED_MESSAGE_AGAIN)
    ) {
      // –£–±–∏—Ä–∞–µ–º "-100" –∏–∑ CHANNEL_ID, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Å—Å—ã–ª–∫–∏
      const positiveChannelId = String(destinationChatId).replace("-100", ""); // –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const messageLink = `https://t.me/c/${positiveChannelId}/${editedMessage.message_id}`;

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const notificationText = `${messageText}\n\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${messageLink}`;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –¥—Ä—É–≥–æ–π —á–∞—Ç –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É)
      await ctx.api.sendMessage(senderChatId, notificationText);
    }
  }
});

bot.on("message", async (ctx) => {
  const recievedChatId = ctx.chat.id;

  if (recievedChatId.toString() !== senderChatId) {
    return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö —á–∞—Ç–æ–≤
  }

  let messageToSend = "";

  const message = ctx.message;

  const reply = {
    reply_to_message_id: message.message_id, // –£–∫–∞–∑—ã–≤–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å
  };

  if (
    ctx.message.new_chat_members ||
    ctx.message.left_chat_member ||
    ctx.message.left_chat_participant
  ) {
    return; // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–µ —Ä–µ–∞–≥–∏—Ä—É—è –Ω–∞ —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  }
  const messageText = message.text || message.caption;
  if (messageText) {
    const parts = messageText.split(" ");
    let order = "";

    if (parts[0]) {
      order = parts[0].split("\n")[0];
    }
    console.log(order);
    if (isNaN(order)) {
      // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞—ã
      await ctx.reply(
        "‚ùóÔ∏è–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –£–∫–∞–∂–∏—Ç–µ –æ—Ä–¥–µ—Ä –ø–µ—Ä–≤—ã–º –≤ –∑–∞–ø—Ä–æ—Å–µ.",
        reply
      );
      return;
    }

    try {
      externalID = await getExternalID(order, ctx);
      messageToSend = `${externalID}\n${messageText}`;
    } catch (error) {
      console.log(error);
      await ctx.reply(
        "‚ùóÔ∏è–û—Ä–¥–µ—Ä –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –¥–∞–Ω–Ω–æ–π –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–µ–ª —Å–±–æ–π –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ü–°.",
        reply
      );
      return;
    }
  } // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—å—é –∞–ª—å–±–æ–º–∞ (media group)

  if (message.media_group_id || message.document) {
    const groupId = message.media_group_id;

    // –ï—Å–ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å –∞–ª—å–±–æ–º–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–µ—à
    if (!mediaGroupCache[groupId]) {
      mediaGroupCache[groupId] = [];
    }
    //message.document.mime_type === "application/pdf" ||
    if (
      message.document &&
      (message.document.mime_type === "image/png" ||
        message.document.mime_type === "image/png" ||
        message.document.mime_type === "image/jpeg")
    ) {
      await handlePdfPngError(ctx, groupId);
      return;
    }
    console.log("123");
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –∫–µ—àq
    mediaGroupCache[groupId].push({
      type: "photo",
      media: message.photo[message.photo.length - 1].file_id, // –°–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
      caption: messageToSend || "", // –¢–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–¥–ø–∏—Å—å
    });

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    if (mediaGroupTimers[groupId]) {
      clearTimeout(mediaGroupTimers[groupId]);
    }
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–π –≥—Ä—É–ø–ø—ã —Ñ–æ—Ç–æ
    mediaGroupTimers[groupId] = setTimeout(async () => {
      if (mediaGroupCache[groupId] && mediaGroupCache[groupId][0].caption) {
        try {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
          await ctx.api.sendMediaGroup(
            destinationChatId,
            mediaGroupCache[groupId]
          );
          const externalIDtosend = externalID;
          externalID = "";
          await ctx.reply(
            `üü¢–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\nBova ID: \`${externalIDtosend}\``,
            {
              ...reply,
              parse_mode: "Markdown",
            }
          );
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ:", error);
          await ctx.reply(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
          );
        }

        // –û—á–∏—â–∞–µ–º –∫–µ—à –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        delete mediaGroupCache[groupId];
        delete mediaGroupTimers[groupId];
      } else {
        await ctx.reply("‚ùóÔ∏è–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∫ —á–µ–∫–∞–º –∑–∞–ø—Ä–æ—Å.");
      }
    }, 1500); // –£–≤–µ–ª–∏—á–∏–ª–∏ —Ç–∞–π–º–µ—Ä –¥–æ 1000 –º—Å –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ
  } else if (message.photo && message.caption) {
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–ª—å–±–æ–º, –∞ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–æ–º
    const media = [
      {
        type: "photo",
        media: message.photo[message.photo.length - 1].file_id, // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ (–Ω–∞–∏–±–æ–ª—å—à–∏–π —Ä–∞–∑–º–µ—Ä)
        caption: messageToSend,
      },
    ];
    try {
      await ctx.api.sendMediaGroup(destinationChatId, media);
      await ctx.reply(`üü¢–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\nBova ID: \`${externalID}\``, {
        ...reply,
        parse_mode: "Markdown",
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ:", error);
      await ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        reply
      );
      return;
    }
  } else {
    await ctx.reply("‚ùóÔ∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ —Å –∑–∞–ø—Ä–æ—Å–æ–º.", reply);
  }
});

bot.start({ drop_pending_updates: true });
