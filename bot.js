import dotenv from "dotenv";
import { Bot } from "grammy";
import axios from "axios";
import {
  getExternalID,
  handleDocumentError,
  mediaGroupCache,
  mediaGroupTimers,
} from "./requests.js";
import * as cheerio from "cheerio";

dotenv.config();
export const bot = new Bot(process.env.BOT_API_KEY);
const senderChatId = process.env.SENDER_CHAT_ID;
const destinationChatId = process.env.DESTINATION_CHAT_ID;
const requestUrl = process.env.REQUEST_URL;
let orderData = "";
let externalID = "";
let requisit = "";

bot.api.setMyCommands(
  [
    { command: "details", description: "Request payment details" },
    {
      command: "message",
      description: "Send any message. Command will not handle img/pdf.",
    },
  ],
  {
    scope: {
      type: "chat",
      chat_id: senderChatId,
    },
  }
);

bot.command("details", async (ctx) => {
  const recievedChatId = ctx.chat.id;
  if (recievedChatId.toString() !== senderChatId) {
    return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö —á–∞—Ç–æ–≤
  }

  const userMessageId = ctx.message.message_id;
  const reply = {
    reply_to_message_id: userMessageId, // –£–∫–∞–∑—ã–≤–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å
  };

  const messageText = ctx.message.text;
  const parts = messageText.split(/\s+/);
  if (parts.length <= 1) {
    try {
      await ctx.reply(
        '‚ùóÔ∏è–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –§–æ—Ä–º–∞—Ç: "/details <–æ—Ä–¥–µ—Ä>".',
        reply
      );
      return;
    } catch (error) {
      console.log(error);
      return;
    }
  }

  const formattedParts = parts.slice(1);
  async function getOrdersDetails(formattedParts) {
    // –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–∑ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞
    const cleanedParts = formattedParts.map((part) => part.replace(/\n/g, ""));
    const responseObject = [];

    // –ú–∞—Å—Å–∏–≤ –ø—Ä–æ–º–∏—Å–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const requests = cleanedParts.map((order) =>
      axios
        .get(requestUrl, {
          params: {
            direction: "m2b",
            id: order,
          },
        })
        .then((response) => {
          const responseHtml = cheerio.load(response.data, {
            decodeEntities: false,
          });
          const externalId = responseHtml(".result h2").text();
          const requsit = responseHtml(".result tr:nth-child(2) td.pl").text();
          const bank = responseHtml(".result tr:nth-child(3) td.pl").text();
          const sum = responseHtml(".result tr:nth-child(4) td.pl").text();

          // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤
          const object = `üü¢–û—Ä–¥–µ—Ä: \`${order}\`\nBova ID: \`${externalId}\`\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: \`${requsit}\`\n–ë–∞–Ω–∫: \`${bank}\`\n–°—É–º–º–∞: \`${sum}\`\n`;
          responseObject.push(object);
        })
        .catch(() => {
          // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–æ—á–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤
          const errObject = `‚ùóÔ∏è–û—Ä–¥–µ—Ä: \`${order}\`\n–†–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–µ –≤—ã–¥–∞–≤–∞–ª–∏—Å—å –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–µ–ª —Å–±–æ–π.\n`;
          responseObject.push(errObject);
        })
    );

    // –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    await Promise.allSettled(requests);

    return responseObject;
  }

  const details = await getOrdersDetails(formattedParts);
  const detailsString = details.join("\n");

  ctx.reply(detailsString, {
    parse_mode: "Markdown",
    ...reply,
  });
});

bot.command("message", async (ctx) => {
  const recievedChatId = ctx.chat.id;
  if (recievedChatId.toString() !== senderChatId) {
    return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö —á–∞—Ç–æ–≤
  }

  const message = ctx.message;
  const reply = {
    reply_to_message_id: message.message_id, // –£–∫–∞–∑—ã–≤–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å
  };

  const messageText = message.text || message.caption;
  const parts = messageText.split(" ");
  if (parts.length <= 1) {
    await ctx.reply(
      '‚ùóÔ∏è–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –§–æ—Ä–º–∞—Ç: "/message <text>".',
      reply
    );
    return;
  }
  const botCommand = parts[0];
  const text = messageText.replace(botCommand, "");

  try {
    await bot.api.sendMessage(destinationChatId, text);
    await ctx.reply("üü¢–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", reply);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
      reply
    );
    return;
  }
});

bot.on("message", async (ctx) => {
  const recievedChatId = ctx.chat.id;

  if (recievedChatId.toString() !== senderChatId) {
    return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö —á–∞—Ç–æ–≤
  }

  let messageToSend = "";
  let externalIdToSend = "";

  const message = ctx.message;
  const reply = {
    reply_to_message_id: message.message_id, // –£–∫–∞–∑—ã–≤–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å
  };

  if (
    ctx.message.new_chat_members ||
    ctx.message.left_chat_member ||
    ctx.message.left_chat_participant
  ) {
    return; // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–µ —Ä–µ–∞–≥–∏—Ä—É—è –Ω–∞ —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  }
  const messageText = message.text || message.caption;

  if (messageText) {
    const parts = messageText.split(" ");
    let order = "";
    let externalIDtosend = "";

    if (parts[0]) {
      order = parts[0].split("\n")[0];
    }
    if (isNaN(order)) {
      // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞—ã
      await ctx.reply(
        "‚ùóÔ∏è–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –£–∫–∞–∂–∏—Ç–µ –æ—Ä–¥–µ—Ä –ø–µ—Ä–≤—ã–º –≤ –∑–∞–ø—Ä–æ—Å–µ.",
        reply
      );
      return;
    }

    try {
      orderData = await getExternalID(order, ctx);
      externalID = orderData.externalId;
      requisit = orderData.requsit;
      messageToSend = `${externalID}\n${messageText}`;
    } catch (error) {
      console.log(error);
      await ctx.reply(
        "‚ùóÔ∏è–û—Ä–¥–µ—Ä –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –¥–∞–Ω–Ω–æ–π –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–µ–ª —Å–±–æ–π –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ü–°.",
        reply
      );
      return;
    }
  } // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—å—é –∞–ª—å–±–æ–º–∞ (media group)
  const groupId = message.media_group_id;

  if (!mediaGroupCache[groupId]) {
    mediaGroupCache[groupId] = [];
  }

  if (message.media_group_id && message.document) {
    await handleDocumentError(ctx, groupId);
    return;
  }
  if (message.media_group_id) {
    // –ï—Å–ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å –∞–ª—å–±–æ–º–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–µ—à
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –∫–µ—à
    mediaGroupCache[groupId].push({
      type: "photo",
      media: message.photo[message.photo.length - 1].file_id, // –°–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
      caption: messageToSend || "", // –¢–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–¥–ø–∏—Å—å
    });

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    if (mediaGroupTimers[groupId]) {
      clearTimeout(mediaGroupTimers[groupId]);
    }
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–π –≥—Ä—É–ø–ø—ã —Ñ–æ—Ç–æ
    mediaGroupTimers[groupId] = setTimeout(async () => {
      if (mediaGroupCache[groupId] && mediaGroupCache[groupId][0].caption) {
        try {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
          await ctx.api.sendMediaGroup(
            destinationChatId,
            mediaGroupCache[groupId]
          );
          await ctx.reply(
            `üü¢–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\nBova ID: \`${externalID}\`\n–†–µ–∫–≤–∏–∑–∏—Ç—ã: \`${requisit}\``,
            {
              ...reply,
              parse_mode: "Markdown",
            }
          );
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ:", error);
          await ctx.reply(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
          );
        }

        // –û—á–∏—â–∞–µ–º –∫–µ—à –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        delete mediaGroupCache[groupId];
        delete mediaGroupTimers[groupId];
      } else {
        await ctx.reply("‚ùóÔ∏è–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∫ —á–µ–∫–∞–º –∑–∞–ø—Ä–æ—Å.");
      }
    }, 1500); // –£–≤–µ–ª–∏—á–∏–ª–∏ —Ç–∞–π–º–µ—Ä –¥–æ 1000 –º—Å –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ
  } else if (message.photo && message.caption) {
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–ª—å–±–æ–º, –∞ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–æ–º
    const media = [
      {
        type: "photo",
        media: message.photo[message.photo.length - 1].file_id, // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ (–Ω–∞–∏–±–æ–ª—å—à–∏–π —Ä–∞–∑–º–µ—Ä)
        caption: messageToSend,
      },
    ];
    try {
      await ctx.api.sendMediaGroup(destinationChatId, media);
      await ctx.reply(
        `üü¢–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\nBova ID: \`${externalID}\`\n–†–µ–∫–≤–∏–∑–∏—Ç—ã: \`${requisit}\``,
        {
          ...reply,
          parse_mode: "Markdown",
        }
      );
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ:", error);
      await ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        reply
      );
      return;
    }
  } else if (message.document && message.caption) {
    const media = [
      {
        type: "document",
        media: message.document.file_id, // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ (–Ω–∞–∏–±–æ–ª—å—à–∏–π —Ä–∞–∑–º–µ—Ä)
        caption: messageToSend,
      },
    ];
    try {
      await ctx.api.sendMediaGroup(destinationChatId, media);
      await ctx.reply(
        `üü¢–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\nBova ID: \`${externalID}\`\n–†–µ–∫–≤–∏–∑–∏—Ç—ã: \`${requisit}\``,
        {
          ...reply,
          parse_mode: "Markdown",
        }
      );
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ:", error);
      await ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        reply
      );
      return;
    }
  } else {
    await ctx.reply("‚ùóÔ∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ —Å –∑–∞–ø—Ä–æ—Å–æ–º.", reply);
  }
});

bot.start({ drop_pending_updates: true });
